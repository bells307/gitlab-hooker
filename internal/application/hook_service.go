package application

import (
	"fmt"

	"github.com/bells307/gitlab-hooker/internal/domain"
)

type hookService struct {
	senderService SenderService
}

// –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
type SenderService interface {
	SendMessageToChats(string)
}

func NewHookService(senderService SenderService) *hookService {
	return &hookService{senderService}
}

func (s *hookService) ProcessMergeRequestHook(mr domain.MergeRequestHook) error {
	// TODO: templates
	if mr.ObjectAttributes.State == "opened" && mr.ObjectAttributes.Action == "open" {
		msg := fmt.Sprintf(
			"üîç <b>%s</b> —Å–æ–∑–¥–∞–ª <b>Merge Request</b> \"%s\" –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ <i>%s</i>:\n%s",
			mr.User.Name,
			mr.ObjectAttributes.Title,
			mr.Project.Name,
			mr.ObjectAttributes.URL,
		)
		s.senderService.SendMessageToChats(msg)
	} else if mr.ObjectAttributes.State == "merged" && mr.ObjectAttributes.Action == "merge" {
		msg := fmt.Sprintf(
			"‚úÖ <b>%s</b> —Å–ª–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ <b>Merge Request</b> \"%s\" –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ <i>%s</i>:\n%s",
			mr.User.Name,
			mr.ObjectAttributes.Title,
			mr.Project.Name,
			mr.ObjectAttributes.URL,
		)
		s.senderService.SendMessageToChats(msg)
	}

	return nil
}
