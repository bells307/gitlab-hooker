package application

import (
	"fmt"
	"github.com/bells307/gitlab-hooker/internal/domain/merge_request"
	"github.com/bells307/gitlab-hooker/internal/domain/pipeline"
)

type hookService struct {
	senderService SenderService
}

// –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
type SenderService interface {
	SendMessageToChats(string)
}

func NewHookService(senderService SenderService) *hookService {
	return &hookService{senderService}
}

func (s *hookService) ProcessMergeRequestHook(hook merge_request.MergeRequest) error {
	// TODO: templates
	if hook.State == merge_request.StateOpened && hook.Action == merge_request.ActionOpen {
		msg := fmt.Sprintf(
			"üîç <b>%s</b> —Å–æ–∑–¥–∞–ª <b>Merge Request</b> \"%s\" –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ <i>%s</i>:\n%s",
			hook.Username,
			hook.Title,
			hook.Project,
			hook.URL,
		)
		s.senderService.SendMessageToChats(msg)
	} else if hook.State == merge_request.StateMerged && hook.Action == merge_request.ActionMerge {
		msg := fmt.Sprintf(
			"‚úÖ <b>%s</b> —Å–ª–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ <b>Merge Request</b> \"%s\" –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ <i>%s</i>:\n%s",
			hook.Username,
			hook.Title,
			hook.Project,
			hook.URL,
		)
		s.senderService.SendMessageToChats(msg)
	}

	return nil
}

func (s *hookService) ProcessPipelineHook(hook pipeline.Pipeline) error {
	if hook.Status == pipeline.Success {
		msg := fmt.Sprintf(
			"üî® –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω <b>Pipeline</b> –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ <i>%s</i> (–≤–µ—Ç–∫–∞ <i>%s</i>)",
			hook.Project,
			hook.Branch,
		)
		s.senderService.SendMessageToChats(msg)
	} else if hook.Status == pipeline.Failed {
		msg := fmt.Sprintf(
			"üß® <b>Pipeline</b> –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ <i>%s</i> (–≤–µ—Ç–∫–∞ <i>%s</i>)",
			hook.Project,
			hook.Branch,
		)
		s.senderService.SendMessageToChats(msg)
	}

	return nil
}
